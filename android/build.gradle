group = "dev.snaply.flutter_android"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.4")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "dev.snaply.flutter_android"
    }

    compileSdk = 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            manifest.srcFile getManifestPath()
        }
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }


    defaultConfig {
        minSdk = 23
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:1.8.22")
        testImplementation("io.mockk:mockk:1.13.9")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

def getManifestPath() {
    if (!project.hasProperty('dart-defines')) {
        return 'src/main/AndroidManifest.xml'
    }

    def dartDefines = project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def keyValue = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(keyValue[0]): keyValue[1]]
            }

    def snaplyConfig = dartDefines.SNAPLY_CONFIG?.split(';') ?: []
    def useMediaProjection = snaplyConfig.contains('useAndroidMediaProjection')

    return useMediaProjection ? 
            'src/main/AndroidManifestWithMediaProjection.xml' : 
            'src/main/AndroidManifest.xml'
}